#define _LARGEFILE64_SOURCE 1
#define _FILE_OFFSET_BITS 64
#define __STDC_FORMAT_MACROS
#include <inttypes.h>
#include "common.h"

int ring_buffer_write(RingBufferContext* ctx, uint8_t* buffer, int size)
{
	pthread_mutex_lock(&ctx->lock);
	uint8_t* wptr = ctx->data_ptr + ctx->data_size;
	uint8_t* wptr2 = NULL;
	int size2 = 0;
	if(size <= (ctx->buffer_size - ctx->data_size))//space available
	{
		if(wptr >= ctx->buffer_end)//rrrrrwwwwwwrrrrrr
		{
			int skip = wptr - ctx->buffer_end;
			wptr = ctx->buffer_base + skip;
		}
		else if((wptr + size) > ctx->buffer_end)//wwwwwrrrrrrww
		{
			wptr2 = ctx->buffer_base;
			size2 = size - (ctx->buffer_end - wptr);
			size -= size2;
		}
		else//rrrrwwwww
		{
			//nothing
		}
		memcpy(wptr, buffer, size);
		if(wptr2)
		{
			memcpy(wptr2, buffer+size, size2);
		}
		ctx->data_size += (size+size2);
		pthread_mutex_unlock(&ctx->lock);
		return 0;
	}
	else
	{
		pthread_mutex_unlock(&ctx->lock);
		return -1;
	}
}

int ring_buffer_read(RingBufferContext* ctx, uint8_t* buffer, int size)
{
	pthread_mutex_lock(&ctx->lock);
	uint8_t* rptr = ctx->data_ptr + size;
	if(size <= ctx->data_size)
	{
		if(rptr > ctx->buffer_end)
		{
			int size0 = ctx->buffer_end - ctx->data_ptr;
			int size1 = rptr - ctx->buffer_end;
			memcpy(buffer, ctx->data_ptr, size0);
			memcpy(buffer+size0, ctx->buffer_base, size1);
			ctx->data_ptr = ctx->buffer_base + size1;
			ctx->data_size -= size;
		}
		else
		{
			memcpy(buffer, ctx->data_ptr, size);
			ctx->data_ptr = ctx->data_ptr + size;
			ctx->data_size -= size;
			if(ctx->data_ptr >= ctx->buffer_end)
			{
				ctx->data_ptr = ctx->buffer_base;
			}
		}
		pthread_mutex_unlock(&ctx->lock);
		return 0;
	}
	else
	{
		pthread_mutex_unlock(&ctx->lock);
		return -1;
	}
}

int ring_buffer_discard_head(RingBufferContext* ctx, int size)
{
	pthread_mutex_lock(&ctx->lock);
	uint8_t* rptr = ctx->data_ptr + size;
	if(size <= ctx->data_size)
	{
		if(rptr > ctx->buffer_end)
		{
			//int size0 = ctx->buffer_end - ctx->data_ptr;
			int size1 = rptr - ctx->buffer_end;
			ctx->data_ptr = ctx->buffer_base + size1;
			ctx->data_size -= size;
		}
		else
		{
			ctx->data_ptr = ctx->data_ptr + size;
			ctx->data_size -= size;
			if(ctx->data_ptr >= ctx->buffer_end)
			{
				ctx->data_ptr = ctx->buffer_base;
			}
		}
		pthread_mutex_unlock(&ctx->lock);
		return 0;
	}
	else
	{
		pthread_mutex_unlock(&ctx->lock);
		return -1;
	}
}

int ring_buffer_readoffset(RingBufferContext* ctx, uint8_t* buffer, int size, int offset)
{
	pthread_mutex_lock(&ctx->lock);
	int tmpsize = 0;
	uint8_t* destptr = ctx->data_ptr + offset; //dest read ptr
	if (destptr > ctx->buffer_end)
	{
		tmpsize = destptr - ctx->buffer_end;
		destptr = ctx->buffer_base + tmpsize;
	}
	int datasize_from_offset = ctx->data_size - offset;
	if (size <= datasize_from_offset)
	{
		if(destptr+size <= ctx->buffer_end)
			memcpy(buffer, destptr, size);
		else
		{
			int size0 = ctx->buffer_end - destptr;
			memcpy(buffer, destptr, size0);
			memcpy(buffer+size0, ctx->buffer_base, size-size0);
		}
		pthread_mutex_unlock(&ctx->lock);
		return size;
	}
	else if(datasize_from_offset > 0)
	{
		if(destptr+datasize_from_offset <= ctx->buffer_end)
			memcpy(buffer, destptr, datasize_from_offset);
		else
		{
			int size0 = ctx->buffer_end - destptr;
			memcpy(buffer, destptr, size0);
			memcpy(buffer+size0, ctx->buffer_base, datasize_from_offset-size0);
		}
		pthread_mutex_unlock(&ctx->lock);
		return datasize_from_offset;
	}
	else
	{
		pthread_mutex_unlock(&ctx->lock);
		return 0;
	}
}

int ring_buffer_init(RingBufferContext* ctx, int size)
{
	pthread_mutex_init(&ctx->lock, NULL);
	ctx->buffer_base = (uint8_t*)malloc(size);
	if(ctx->buffer_base)
	{
		memset(ctx->buffer_base, 0, size);
		ctx->buffer_end = ctx->buffer_base + size;
		ctx->buffer_size = size;
		ctx->data_ptr = ctx->buffer_base;
		ctx->data_size = 0;
	}
	return ctx->buffer_base ? 0 : -1;
}

int ring_buffer_free(RingBufferContext* ctx)
{
	pthread_mutex_destroy(&ctx->lock);
	free(ctx->buffer_base);
	ctx->buffer_base = NULL;
	return 0;
}

int ring_buffer_datasize(RingBufferContext* ctx)
{
	pthread_mutex_lock(&ctx->lock);
	int ret = ctx->data_size;
	pthread_mutex_unlock(&ctx->lock);
	return ret;
}

int ring_buffer_buffersize(RingBufferContext* ctx)
{
	pthread_mutex_lock(&ctx->lock);
	int ret = ctx->buffer_size;
	pthread_mutex_unlock(&ctx->lock);
	return ret;
}

int ring_buffer_freesize(RingBufferContext* ctx)
{
	pthread_mutex_lock(&ctx->lock);
	int ret = ctx->buffer_size - ctx->data_size;
	pthread_mutex_unlock(&ctx->lock);
	return ret;
}

int ring_buffer_clear(RingBufferContext* ctx)
{
	pthread_mutex_lock(&ctx->lock);
	ctx->data_ptr = ctx->buffer_base;
	ctx->data_size = 0;
	pthread_mutex_unlock(&ctx->lock);
	return 0;
}

/* we use a global one for convenience */
//static CURLM *multi_handle;

/* curl calls this routine to get more data */
static size_t write_callback(char *buffer,
                             size_t size,
                             size_t nitems,
                             void *userp)
{
  char *newbuff;
  size_t rembuff;

  URL_FILE *url = (URL_FILE *)userp;
  size *= nitems;

  rembuff=url->buffer_len - url->buffer_pos; /* remaining space in buffer */

  if(size > rembuff) {
    /* not enough space in buffer */
    newbuff=(char *)realloc(url->buffer,url->buffer_len + (size - rembuff));
    if(newbuff==NULL) {
      fprintf(stderr,"callback buffer grow failed\n");
      size=rembuff;
    }
    else {
      /* realloc suceeded increase buffer size*/
      url->buffer_len+=size - rembuff;
      url->buffer=newbuff;
    }
  }

  memcpy(&url->buffer[url->buffer_pos], buffer, size);
  url->buffer_pos += size;

  return size;
}

/* use to attempt to fill the read buffer up to requested number of bytes */
static int fill_buffer(URL_FILE *file, size_t want)
{
  fd_set fdread;
  fd_set fdwrite;
  fd_set fdexcep;
  struct timeval timeout;
  int rc;
  //CURLMcode code;

  /* only attempt to fill buffer if transactions still running and buffer
   * doesnt exceed required size already
   */
  if((!file->still_running) || (file->buffer_pos > want))
    return 0;

  /* attempt to fill buffer */
  do {
    int maxfd = -1;
    long curl_timeo = -1;

    FD_ZERO(&fdread);
    FD_ZERO(&fdwrite);
    FD_ZERO(&fdexcep);

    /* set a suitable timeout to fail on */
    timeout.tv_sec = 5; /* 5 seconds */
    timeout.tv_usec = 0;

    curl_multi_timeout(file->multi_handle, &curl_timeo);
    if(curl_timeo >= 0) {
      timeout.tv_sec = curl_timeo / 1000;
      if(timeout.tv_sec > 1)
        timeout.tv_sec = 1;
      else
        timeout.tv_usec = (curl_timeo % 1000) * 1000;
    }

    /* get file descriptors from the transfers */
    curl_multi_fdset(file->multi_handle, &fdread, &fdwrite, &fdexcep, &maxfd);

    /* In a real-world program you OF COURSE check the return code of the
       function calls.  On success, the value of maxfd is guaranteed to be
       greater or equal than -1.  We call select(maxfd + 1, ...), specially
       in case of (maxfd == -1), we call select(0, ...), which is basically
       equal to sleep. */

    rc = select(maxfd+1, &fdread, &fdwrite, &fdexcep, &timeout);

    switch(rc) {
    case -1:
      /* select error */
      break;

    case 0:
    default:
      curl_multi_perform(file->multi_handle, &file->still_running);
	  if(rc == 0)
	  	return 0;
      break;
    }
  } while(file->still_running && (file->buffer_pos < want));
  return 1;
}

/* use to remove want bytes from the front of a files buffer */
static int use_buffer(URL_FILE *file,int want)
{
  /* sort out buffer */
  if((file->buffer_pos - want) <=0) {
    /* ditch buffer - write will recreate */
    if(file->buffer)
      free(file->buffer);

    file->buffer=NULL;
    file->buffer_pos=0;
    file->buffer_len=0;
  }
  else {
    /* move rest down make it available for later */
    memmove(file->buffer,
            &file->buffer[want],
            (file->buffer_pos - want));

    file->buffer_pos -= want;
  }
  return 0;
}

URL_FILE *curl_fopen(const char *url,const char *operation)
{
  /* this code could check for URLs or types in the 'url' and
     basicly use the real fopen() for standard files */

  URL_FILE *file;
  (void)operation;

  file = (URL_FILE *)malloc(sizeof(URL_FILE));
  if(!file)
    return NULL;

  memset(file, 0, sizeof(URL_FILE));
  file->file_size = -1;

  if((file->handle.file=fopen(url,operation)))
    file->type = CFTYPE_FILE; /* marked as URL */

  else {
    file->type = CFTYPE_CURL; /* marked as URL */
    file->handle.curl = curl_easy_init();

    curl_easy_setopt(file->handle.curl, CURLOPT_URL, url);
    curl_easy_setopt(file->handle.curl, CURLOPT_WRITEDATA, file);
    curl_easy_setopt(file->handle.curl, CURLOPT_VERBOSE, 0L);
    curl_easy_setopt(file->handle.curl, CURLOPT_WRITEFUNCTION, write_callback);

    //if(!multi_handle)
      file->multi_handle = curl_multi_init();

    curl_multi_add_handle(file->multi_handle, file->handle.curl);

    /* lets start the fetch */
    curl_multi_perform(file->multi_handle, &file->still_running);

    if((file->buffer_pos == 0) && (!file->still_running)) {
      /* if still_running is 0 now, we should return NULL */

      /* make sure the easy handle is not in the multi handle anymore */
      curl_multi_remove_handle(file->multi_handle, file->handle.curl);

      /* cleanup */
      curl_easy_cleanup(file->handle.curl);

	  curl_multi_cleanup(file->multi_handle);

      free(file);

      file = NULL;
    }
  }
  return file;
}

int curl_fclose(URL_FILE *file)
{
  int ret=0;/* default is good return */

  switch(file->type) {
  case CFTYPE_FILE:
    ret=fclose(file->handle.file); /* passthrough */
    break;

  case CFTYPE_CURL:
    /* make sure the easy handle is not in the multi handle anymore */
    curl_multi_remove_handle(file->multi_handle, file->handle.curl);

    /* cleanup */
    curl_easy_cleanup(file->handle.curl);

	curl_multi_cleanup(file->multi_handle);

	//curl_global_cleanup();
    break;

  default: /* unknown or supported type - oh dear */
    ret=EOF;
    errno=EBADF;
    break;
  }

  if(file->buffer)
    free(file->buffer);/* free any allocated buffer space */

  free(file);

  return ret;
}

int curl_feof(URL_FILE *file)
{
  int ret=0;

  switch(file->type) {
  case CFTYPE_FILE:
    ret=feof(file->handle.file);
    break;

  case CFTYPE_CURL:
    if((file->buffer_pos == 0) && (!file->still_running))
      ret = 1;
    break;

  default: /* unknown or supported type - oh dear */
    ret=-1;
    errno=EBADF;
    break;
  }
  //if(ret == 1)
  //	printf("eof, buffer_pos=%d, still_running=%d\n", file->buffer_pos, file->still_running);
  return ret;
}

size_t curl_fread(void *ptr, size_t size, size_t nmemb, URL_FILE *file)
{
  size_t want;

  switch(file->type) {
  case CFTYPE_FILE:
    want=fread(ptr,size,nmemb,file->handle.file);
    break;

  case CFTYPE_CURL:
    want = nmemb * size;

    fill_buffer(file,want);

    /* check if theres data in the buffer - if not fill_buffer()
     * either errored or EOF 
    */
    if(!file->buffer_pos) {
	  //printf("still running is %d\n", file->still_running);
	  if(!file->still_running) {
		  //printf("=======================curl is not running\n");
	      return -1;
	    }
      return 0;
    }

    /* ensure only available data is considered */
    if(file->buffer_pos < want)
      want = file->buffer_pos;

    /* xfer data to caller */
    memcpy(ptr, file->buffer, want);

    use_buffer(file,want);

    want = want / size;     /* number of items */
    break;

  default: /* unknown or supported type - oh dear */
    want=0;
    errno=EBADF;
    break;

  }

  file->cur_pos += want;
  return want;
}

char *curl_fgets(char *ptr, size_t size, URL_FILE *file)
{
  size_t want = size - 1;/* always need to leave room for zero termination */
  size_t loop;

  switch(file->type) {
  case CFTYPE_FILE:
    ptr = fgets(ptr,size,file->handle.file);
    break;

  case CFTYPE_CURL:
    fill_buffer(file,want);

    /* check if theres data in the buffer - if not fill either errored or
     * EOF */
    if(!file->buffer_pos)
      return NULL;

    /* ensure only available data is considered */
    if(file->buffer_pos < want)
      want = file->buffer_pos;

    /*buffer contains data */
    /* look for newline or eof */
    for(loop=0;loop < want;loop++) {
      if(file->buffer[loop] == '\n') {
        want=loop+1;/* include newline */
        break;
      }
    }

    /* xfer data to caller */
    memcpy(ptr, file->buffer, want);
    ptr[want]=0;/* allways null terminate */

    use_buffer(file,want);

    break;

  default: /* unknown or supported type - oh dear */
    ptr=NULL;
    errno=EBADF;
    break;
  }

  return ptr;/*success */
}

int curl_fseek(URL_FILE *file, long offset, int whence)
{
	int ret = -1;
	char range[128] = {0};
	switch(file->type) {
	case CFTYPE_FILE:
	  ret = fseek(file->handle.file, offset, whence); /* passthrough */
	  break;
	
	case CFTYPE_CURL:
	  /* halt transaction */
	  curl_multi_remove_handle(file->multi_handle, file->handle.curl);

	  if(whence == SEEK_SET)
	  	sprintf(range, "%ld-", offset);
	  else if(whence == SEEK_END)
	  	sprintf(range, "%" PRId64 "-", file->file_size + offset);
	  else if(whence == SEEK_CUR)
	  	sprintf(range, "%" PRId64 "-", file->cur_pos + offset);

	  curl_easy_setopt(file->handle.curl, CURLOPT_RANGE, range);
	
	  /* restart */
	  curl_multi_add_handle(file->multi_handle, file->handle.curl);
	  curl_multi_perform(file->multi_handle, &file->still_running);
	
	  /* ditch buffer - write will recreate - resets stream pos*/
	  if(file->buffer)
		free(file->buffer);
	
	  file->buffer=NULL;
	  file->buffer_pos=0;
	  file->buffer_len=0;
      //printf("still running is %d\n", file->still_running);
	  ret = 0;
	  break;
	
	default: /* unknown or supported type - oh dear */
	  break;
	}
	return ret;
}

int64_t curl_fsize(URL_FILE *file)
{
  fd_set fdread;
  fd_set fdwrite;
  fd_set fdexcep;
  struct timeval timeout;
  int rc;
  double fsize = -1.0f;
	long tellsize = 0;
	long curpos_backup = 0;

  switch(file->type) {
  case CFTYPE_FILE:
  	curpos_backup = ftell(file->handle.file);
	fseek(file->handle.file, 0, SEEK_END); /* passthrough */
	tellsize = ftell(file->handle.file);
	fseek(file->handle.file, curpos_backup, SEEK_SET);
	file->file_size = tellsize;
	break;
  
  case CFTYPE_CURL:

	  /* only attempt to fill buffer if transactions still running and buffer
	   * doesnt exceed required size already
	   */
	 // if(!file->still_running)
	  //  return 0;

	  /* attempt to fill buffer */
	  do {
	    int maxfd = -1;
	    long curl_timeo = -1;

	    FD_ZERO(&fdread);
	    FD_ZERO(&fdwrite);
	    FD_ZERO(&fdexcep);

	    /* set a suitable timeout to fail on */
	    timeout.tv_sec = 5; /* 5 seconds */
	    timeout.tv_usec = 0;

	    curl_multi_timeout(file->multi_handle, &curl_timeo);
	    if(curl_timeo >= 0) {
	      timeout.tv_sec = curl_timeo / 1000;
	      if(timeout.tv_sec > 1)
	        timeout.tv_sec = 1;
	      else
	        timeout.tv_usec = (curl_timeo % 1000) * 1000;
	    }

	    /* get file descriptors from the transfers */
	    curl_multi_fdset(file->multi_handle, &fdread, &fdwrite, &fdexcep, &maxfd);

	    /* In a real-world program you OF COURSE check the return code of the
	       function calls.  On success, the value of maxfd is guaranteed to be
	       greater or equal than -1.  We call select(maxfd + 1, ...), specially
	       in case of (maxfd == -1), we call select(0, ...), which is basically
	       equal to sleep. */

	    rc = select(maxfd+1, &fdread, &fdwrite, &fdexcep, &timeout);

	    switch(rc) {
	    case -1:
	      /* select error */
	      break;

	    case 0:
	    default:
	      /* timeout or readable/writable sockets */
	      curl_multi_perform(file->multi_handle, &file->still_running);
		  curl_easy_getinfo(file->handle.curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &fsize);
	      break;
	    }
	  } while(file->still_running && fsize < 0);
	  file->file_size = fsize;
	  break;
	 
	 default: /* unknown or supported type - oh dear */
	   break;
  	}
  return file->file_size;
}


void curl_rewind(URL_FILE *file)
{
  switch(file->type) {
  case CFTYPE_FILE:
    rewind(file->handle.file); /* passthrough */
    break;

  case CFTYPE_CURL:
    /* halt transaction */
	curl_multi_remove_handle(file->multi_handle, file->handle.curl);

    /* restart */
    curl_multi_add_handle(file->multi_handle, file->handle.curl);

    /* ditch buffer - write will recreate - resets stream pos*/
    if(file->buffer)
      free(file->buffer);

    file->buffer=NULL;
    file->buffer_pos=0;
    file->buffer_len=0;

    break;

  default: /* unknown or supported type - oh dear */
    break;
  }
}

/* Small main program to retrive from a url using fgets and fread saving the
 * output to two test files (note the fgets method will corrupt binary files if
 * they contain 0 chars */
int main(int argc, char *argv[])
{
  URL_FILE *handle;
  FILE *outf;

  int nread;
  char buffer[32768];
  const char *url;
  long long int rsize = 0, nsize = 0, size = 0;
  

  if(argc < 2)
    url="http://localhost/xampp/test/test";/* default to testurl */
  else
    url=argv[1];/* use passed url */

  /* copy from url line by line with fgets */
  /*outf=fopen("fgets.test","w+");
  if(!outf) {
    perror("couldn't open fgets output file\n");
    return 1;
  }

  handle = curl_fopen(url, "r");
  if(!handle) {
    printf("couldn't curl_fopen() %s\n", url);
    fclose(outf);
    return 2;
  }

  //curl_fsize(handle);
  printf("This file->size = %lld\n",curl_fsize(handle));
  
 while(!curl_feof(handle)) {
	memset(buffer, 0, sizeof(buffer)); //+
    curl_fgets(buffer,sizeof(buffer),handle);
    fwrite(buffer,1,strlen(buffer),outf);
  }
 
  fclose(outf);

  curl_fclose(handle);
  */
  /* Copy from url with fread */
  outf=fopen("fread.test","w+");
  if(!outf) {
    perror("couldn't open fread output file\n");
    return 1;
  }

  handle = curl_fopen(url, "r");
  if(!handle) {
    printf("couldn't curl_fopen() testfile\n");
    fclose(outf);
    return 2;
  }
  
  size = curl_fsize(handle);
  printf("This file->size = %lld\n",size);
  //nsize = 4;
  curl_fseek(handle, 4, SEEK_SET);
  //printf("sizeset = %d\n", SEEK_SET);
   
  rsize = 0;
  nsize = size - 4;
  do {
	memset(buffer, 0, sizeof(buffer));
    nread = curl_fread(buffer, 1,sizeof(buffer), handle);
    fwrite(buffer,1,nread,outf);
	rsize += nread;
	if(rsize == nsize)
		break;
  } while(nread > 0);

  curl_fclose(handle);

  fclose(outf);
  
  

  /* Test rewind */
  /*outf=fopen("rewind.test","w+");
  if(!outf) {
    perror("couldn't open fread output file\n");
    return 1;
  }

  handle = curl_fopen(url, "r");
  if(!handle) {
    printf("couldn't curl_fopen() testfile\n");
    fclose(outf);
    return 2;
  }

  nread = curl_fread(buffer, 1,sizeof(buffer), handle);
  fwrite(buffer,1,nread,outf);
  url_rewind(handle);

  buffer[0]='\n';
  fwrite(buffer,1,1,outf);

  nread = curl_fread(buffer, 1,sizeof(buffer), handle);
  fwrite(buffer,1,nread,outf);


  url_fclose(handle);

  fclose(outf);
  */

  //printf("%s\n", headbuf);
  
  
  return 0;/* all done */
}


